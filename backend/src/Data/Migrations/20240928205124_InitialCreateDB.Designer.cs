// <auto-generated />
using System;
using Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ArticleHubDbContext))]
    [Migration("20240928205124_InitialCreateDB")]
    partial class InitialCreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Entities.Article", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("article");
                });

            modelBuilder.Entity("Data.Entities.ArticleComment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("article_id")
                        .HasColumnType("int");

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("article_id");

                    b.HasIndex("user_id");

                    b.ToTable("article_comment");
                });

            modelBuilder.Entity("Data.Entities.ArticleLike", b =>
                {
                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.Property<int>("article_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated")
                        .HasColumnType("datetime2");

                    b.HasKey("user_id", "article_id");

                    b.HasIndex("article_id");

                    b.ToTable("article_like");
                });

            modelBuilder.Entity("Data.Entities.ArticleTag", b =>
                {
                    b.Property<int>("article_id")
                        .HasColumnType("int");

                    b.Property<int>("tag_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated")
                        .HasColumnType("datetime2");

                    b.HasKey("article_id", "tag_id");

                    b.HasIndex("tag_id");

                    b.ToTable("article_tag");
                });

            modelBuilder.Entity("Data.Entities.Tag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("tag");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("Data.Entities.UserFollower", b =>
                {
                    b.Property<int>("User_follower_id")
                        .HasColumnType("int");

                    b.Property<int>("user_followeing_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("updated")
                        .HasColumnType("datetime2");

                    b.HasKey("User_follower_id", "user_followeing_id");

                    b.HasIndex("user_followeing_id");

                    b.ToTable("user_follower");
                });

            modelBuilder.Entity("Data.Entities.Article", b =>
                {
                    b.HasOne("Data.Entities.User", "user")
                        .WithMany("user_articles")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.Entities.ArticleComment", b =>
                {
                    b.HasOne("Data.Entities.Article", "article")
                        .WithMany("article_comments")
                        .HasForeignKey("article_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "user")
                        .WithMany("user_comments")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.Entities.ArticleLike", b =>
                {
                    b.HasOne("Data.Entities.Article", "article")
                        .WithMany("article_likes")
                        .HasForeignKey("article_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "user")
                        .WithMany("user_likes")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Data.Entities.ArticleTag", b =>
                {
                    b.HasOne("Data.Entities.Article", "article")
                        .WithMany("article_tags")
                        .HasForeignKey("article_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Tag", "tag")
                        .WithMany("articles")
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("Data.Entities.UserFollower", b =>
                {
                    b.HasOne("Data.Entities.User", "follower")
                        .WithMany("user_followings")
                        .HasForeignKey("User_follower_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "followeing")
                        .WithMany("user_followers")
                        .HasForeignKey("user_followeing_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("followeing");

                    b.Navigation("follower");
                });

            modelBuilder.Entity("Data.Entities.Article", b =>
                {
                    b.Navigation("article_comments");

                    b.Navigation("article_likes");

                    b.Navigation("article_tags");
                });

            modelBuilder.Entity("Data.Entities.Tag", b =>
                {
                    b.Navigation("articles");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("user_articles");

                    b.Navigation("user_comments");

                    b.Navigation("user_followers");

                    b.Navigation("user_followings");

                    b.Navigation("user_likes");
                });
#pragma warning restore 612, 618
        }
    }
}
